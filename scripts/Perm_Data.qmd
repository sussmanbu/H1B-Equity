#Libraries

```{r}
library(dplyr)
library(tsibble)
library(tidyr)
library(ggplot2)
library(forecast)
library(zoo)
library(readxl)
library(lubridate)
library(broom)
library(stringr)
```

#Loading Data:

```{r message = FALSE, warning = FALSE}
filepath <- 'dataset/Perm_data/PERM_FY2019.xlsx'
fy19 <- read_excel(filepath)
```

```{r message = FALSE, warning = FALSE}
filepath <- 'dataset/Perm_data/PERM_Disclosure_Data_FY2020.xlsx'
fy20 <- read_excel(filepath)
```

```{r message = FALSE, warning = FALSE}
filepath <- 'dataset/Perm_data/PERM_Disclosure_Data_FY2021.xlsx'
fy21 <- read_excel(filepath)
```

```{r message = FALSE, warning = FALSE}
filepath <- 'dataset/Perm_data/PERM_Disclosure_Data_FY2022_Q4.xlsx'
fy22 <- read_excel(filepath)
```

```{r message = FALSE, warning = FALSE}
filepath <- 'dataset/Perm_data/PERM_Disclosure_Data_FY2023_Q4.xlsx'
fy23 <- read_excel(filepath)
```

```{r message = FALSE, warning = FALSE}
combined_19_23 <- read.csv("dataset/combined_perm_19_23.csv")
```

#Filtering by H-1B:

```{r}
fy19 <- fy19 |> 
  filter(CLASS_OF_ADMISSION == 'H-1B')
fy20 <- fy20 |> 
  filter(CLASS_OF_ADMISSION == 'H-1B')
fy21 <- fy21 |> 
  filter(CLASS_OF_ADMISSION == 'H-1B')
fy22 <- fy22 |> 
  filter(CLASS_OF_ADMISSION == 'H-1B')
fy23 <- fy23 |> 
  filter(CLASS_OF_ADMISSION == 'H-1B')
```

#List of columns Some years may differ, we will filter them out

#Extract Useful Information

```{r}
relevant_columns <- c("CASE_NUMBER", "CASE_STATUS", "DECISION_DATE", "EMPLOYER_NAME", "WAGE_OFFERED_FROM_9089", "COUNTRY_OF_CITIZENSHIP", "FOREIGN_WORKER_INFO_EDUCATION")
fy19_relevant <- fy19[, relevant_columns]
fy19_relevant <- fy19_relevant |> rename(WAGE_OFFER_FROM = WAGE_OFFERED_FROM_9089)
fy19_relevant <- fy19_relevant |> rename(FOREIGN_WORKER_EDUCATION = FOREIGN_WORKER_INFO_EDUCATION)
fy19_relevant$DECISION_DATE <- as.Date(fy19_relevant$DECISION_DATE)

relevant_columns <- c("CASE_NUMBER", "CASE_STATUS", "DECISION_DATE", "EMPLOYER_NAME", "WAGE_OFFER_FROM", "COUNTRY_OF_CITIZENSHIP", "FOREIGN_WORKER_EDUCATION")
fy20_relevant <- fy20[, relevant_columns]
fy20_relevant$DECISION_DATE <- as.Date(fy20_relevant$DECISION_DATE)

relevant_columns <- c("CASE_NUMBER", "CASE_STATUS", "DECISION_DATE", "EMPLOYER_NAME", "WAGE_OFFER_FROM", "COUNTRY_OF_CITIZENSHIP", "FOREIGN_WORKER_EDUCATION")
fy21_relevant <- fy21[, relevant_columns]
# fy21_relevant <- fy21_relevant |> rename(WAGE_OFFER_FROM = WAGE_OFFERED_FROM_9089)
fy21_relevant$DECISION_DATE <- as.Date(fy21_relevant$DECISION_DATE)

relevant_columns <- c("CASE_NUMBER", "CASE_STATUS", "DECISION_DATE", "EMPLOYER_NAME", "WAGE_OFFER_FROM", "COUNTRY_OF_CITIZENSHIP", "FOREIGN_WORKER_EDUCATION")
fy22_relevant <- fy22[, relevant_columns]
# fy21_relevant <- fy21_relevant |> rename(WAGE_OFFER_FROM = WAGE_OFFERED_FROM_9089)
fy22_relevant$DECISION_DATE <- as.Date(fy22_relevant$DECISION_DATE)

relevant_columns <- c("CASE_NUMBER", "CASE_STATUS", "DECISION_DATE", "EMPLOYER_NAME", "WAGE_OFFER_FROM", "COUNTRY_OF_CITIZENSHIP", "FOREIGN_WORKER_EDUCATION")
fy23_relevant <- fy23[, relevant_columns]
# fy21_relevant <- fy21_relevant |> rename(WAGE_OFFER_FROM = WAGE_OFFERED_FROM_9089)
fy23_relevant$DECISION_DATE <- as.Date(fy23_relevant$DECISION_DATE)
```

#Notes: Case_status : Certified, Certified-Expired, Denied, Withdrawn

Foreign_worker_education: Master's, Bachelor's, Doctorate, Other, None, Associate's, High School

#Select Numeric Values and see correlation:

```{r}
fy19_relevant$month <- month(fy19_relevant$DECISION_DATE)
fy19_relevant$year <- year(fy19_relevant$DECISION_DATE)
fy19_relevant$year_month <- paste(fy19_relevant$year, fy19_relevant$month, sep = "-")

fy20_relevant$month <- month(fy20_relevant$DECISION_DATE)
fy20_relevant$year <- year(fy20_relevant$DECISION_DATE)
fy20_relevant$year_month <- paste(fy20_relevant$year, fy20_relevant$month, sep = "-")

fy21_relevant$month <- month(fy21_relevant$DECISION_DATE)
fy21_relevant$year <- year(fy21_relevant$DECISION_DATE)
fy21_relevant$year_month <- paste(fy21_relevant$year, fy21_relevant$month, sep = "-")

fy22_relevant$month <- month(fy22_relevant$DECISION_DATE)
fy22_relevant$year <- year(fy22_relevant$DECISION_DATE)
fy22_relevant$year_month <- paste(fy22_relevant$year, fy22_relevant$month, sep = "-")

fy23_relevant$month <- month(fy23_relevant$DECISION_DATE)
fy23_relevant$year <- year(fy23_relevant$DECISION_DATE)
fy23_relevant$year_month <- paste(fy23_relevant$year, fy23_relevant$month, sep = "-")
```

#Try Linear Regression, with number of applicants and number of applications certified

```{r}
applicants_count <- fy23 |>
  group_by(COUNTRY_OF_CITIZENSHIP) |>
  summarise(num_applicants = n())

fy23_certified <- fy23 |>
  filter(CASE_STATUS %in% c('Certified', 'Certified-Expired')) |>
  group_by(COUNTRY_OF_CITIZENSHIP) |>
  summarise(num_certified = n())

prop_certified <- left_join(applicants_count, fy23_certified, by = "COUNTRY_OF_CITIZENSHIP")
```

```{r}
ggplot(prop_certified, aes(x = num_applicants, y = num_certified)) +
  geom_point(shape = 21, fill = "blue", color = "black", size = 3, alpha = 0.5) +
  labs(x = "Number of Applicants", y = "Number Certified", title = "Scatter Plot of Applicants vs Certified, 2023")
```

```{r}
#calculating q3 + 1.5*iqr and q1-1.5*iqr to remove outliers
quantiles <- quantile(prop_certified$num_applicants, probs = c(0.25, 0.75))
q1 <- quantiles[1]
q3 <- quantiles[2]
iqr <- q3 - q1
maxthreshold <- q3 + 1.5 * iqr
minthreshold <- q1 -1.5*iqr
top_outliers <- prop_certified[prop_certified$num_applicants > maxthreshold, ]
bottom_outliers <- prop_certified[prop_certified$num_applicants < minthreshold, ]

#removing outliers
prop_certified_filtered <- prop_certified|> filter(num_applicants <= maxthreshold, num_applicants >= minthreshold)

```

```{r}
prop_certified_filtered$num_applicants_log <- log(prop_certified_filtered$num_applicants)
prop_certified_filtered$num_certified_log <- log(prop_certified_filtered$num_certified)

linear_model_filtered <- lm(num_applicants_log ~ num_certified_log -1, data = prop_certified_filtered)
```

```{r}
summary(linear_model_filtered)
```

```{r}
broom::tidy(linear_model_filtered)
```

```{r}
predicted_log <- predict(linear_model_filtered)

predicted <- exp(predicted_log)

augmented_data <- augment(linear_model_filtered, newdata = data.frame(num_certified_log = prop_certified_filtered$num_certified_log, num_applicants_log = prop_certified_filtered$num_applicants_log))

augmented_data$exp_fitted <- exp(augmented_data$.fitted)
augmented_data$exp_resid <- exp(augmented_data$.resid)

ggplot(augmented_data, aes(x = exp_fitted, y = exp_resid)) +
  geom_point(shape = 21, fill = "transparent", color = "black", size = 3, alpha = 0.5) +
  labs(x = "Fitted Values", y = "Residuals", title = "Residual vs Fitted of Logged Linear Regression")
```

```{r}
summary(fy19$WAGE_OFFERED_FROM_9089)
```

```{r}
sum(is.na(fy19$WAGE_OFFERED_FROM_9089))
sum(is.na(fy19$WAGE_OFFERED_TO_9089))
```

```{r}
quantiles <- quantile(fy23_relevant$WAGE_OFFER_FROM, probs = c(0.25, 0.75), na.rm = TRUE)
q1 <- quantiles[1]
q3 <- quantiles[2]
iqr <- q3 - q1

maxthreshold <- q3 + 1.5 * iqr
minthreshold <- q1 -1.5*iqr

top_outliers <- fy23_relevant[fy23_relevant$WAGE_OFFER_FROM > maxthreshold, ]
bottom_outliers <- fy23_relevant[fy23_relevant$WAGE_OFFER_FROM < minthreshold, ]

# Remove outliers from the original dataset
fy23_wage <- fy23_relevant|> filter(WAGE_OFFER_FROM <= maxthreshold, WAGE_OFFER_FROM >= minthreshold)

```

```{r}
# Define the number of bins and create bins for the 'WAGE_OFFERED_FROM_9089' variable
num_bins <- 5  # You can adjust the number of bins as needed
fy23_wage <- fy23_wage %>%
  mutate(WAGE_BIN = cut(WAGE_OFFER_FROM, breaks = num_bins, labels = FALSE))


# Group by the bins and count the number of applicants for each bin
applicant_counts <- fy23_wage |>
  group_by(WAGE_BIN) |>
  mutate(num_applicants = n())

```

```{r}
ggplot(fy23_wage, aes(x = WAGE_BIN)) +
  geom_bar() +
  labs(x = "Wage Bin", y = "Number of Applicants", title = "Wages of Applicants")
```

```{r}
fy23_times <- fy23_relevant |>
  group_by(year_month)|>
  summarise(num_applicants = n())
```

```{r}
ts_data <- fy23_times |>
  mutate(date = yearmonth(fy23_times$year_month)) |>
  as_tsibble(index = date)
```

```{r}
ts_data_ts <- as.ts(ts_data$num_applicants)
```

```{r}
fit <- auto.arima(ts_data_ts)
summary(fit)
forecast_values <- forecast(fit, h = 12)  # Forecasting for the next 12 periods
# Plot forecast
autoplot(forecast_values) +
  labs(title = "Forecast of Number of Applicants from 2023 data")
```

```{r}
fy19_relevant
```

```{r}
combined_19_23 <- rbind(fy19_relevant, fy20_relevant)
combined_19_23 <- rbind(combined_19_23, fy21_relevant)
combined_19_23 <- rbind(combined_19_23, fy22_relevant)
combined_19_23 <- rbind(combined_19_23, fy23_relevant)
```

```{r}
combined_19_23_grouped <- combined_19_23 |>
  group_by(year_month)|>
  summarise(num_applicants = n()) |>
  filter(num_applicants > 0)
```

```{r}
ts_data <- combined_19_23_grouped |>
  mutate(date = yearmonth(combined_19_23_grouped$year_month)) |>
  as_tsibble(index = date)
```

```{r}
ts_data_ts <- ts(ts_data$num_applicants, frequency = 30)  # Adjust the frequency accordingly
model <- auto.arima(ts_data_ts)
n_periods <- 12  # For example, predict for the next 12 months
forecast_values <- forecast(model, h = n_periods)
autoplot(forecast_values) +
  labs(title = "Forecast of Number of Applicants, using 2019-2023")
```

```{r}
combined_19_23
```

```{r}
combined_wage <- combined_19_23  |>
  select(year_month, WAGE_OFFER_FROM) |>
  group_by(year_month) |>
  summarise(avg_wage = mean(WAGE_OFFER_FROM, na.rm = TRUE)) %>%
  filter(!is.na(avg_wage))
```

```{r}
ts_data <- combined_wage |>
  mutate(date = yearmonth(combined_wage$year_month)) |>
  as_tsibble(index = date)
```

```{r}
ts_data_ts <- ts(ts_data$avg_wage, frequency = 30)  # Adjust the frequency accordingly
model <- auto.arima(ts_data_ts)
n_periods <- 12 
forecast_values <- forecast(model, h = n_periods)
# Plot the forecast
autoplot(forecast_values) +
  labs(title = "Forecast of Wage")
```

```{r}
top5_countries <- combined_19_23 |>
  group_by(COUNTRY_OF_CITIZENSHIP) |>
  summarise(num_applicants = n()) |>
  top_n(5)

bottom5_countries <- combined_19_23 |>
  group_by(COUNTRY_OF_CITIZENSHIP) |>
  summarise(num_applicants = n()) |>
  filter(num_applicants > 0) |>
  top_n(-5)
```

```{r}
top5_countries
```

```{r}
top5_applicants <- combined_19_23 %>%
  filter(COUNTRY_OF_CITIZENSHIP %in% top5_countries$COUNTRY_OF_CITIZENSHIP)|>
  group_by(COUNTRY_OF_CITIZENSHIP, year_month) %>%
  summarise(total_applicants = n())


# Step 2: Calculate the number of certified or certified-expired applicants for each country
top5_certified <- combined_19_23 %>%
  filter(COUNTRY_OF_CITIZENSHIP %in% top5_countries$COUNTRY_OF_CITIZENSHIP)|>
  filter(CASE_STATUS %in% c("Certified", "Certified-Expired")) %>%
  group_by(COUNTRY_OF_CITIZENSHIP, year_month) %>%
  summarise(certified_applicants = n())
```

```{r}
merged_data <- left_join(top5_applicants, top5_certified, by = c("COUNTRY_OF_CITIZENSHIP", "year_month"))
```

```{r}
merged_data
```

```{r}
ggplot(merged_data, aes(y = total_applicants, x = yearmonth(year_month), color = COUNTRY_OF_CITIZENSHIP)) +
  geom_line() +
  geom_line(aes(y = certified_applicants), linetype = "dotted") +
  labs(x = "Total Number of Applicants", y = "Decision Date", title = "Number of Applicants by Country for Top 5 Countries")
```

```{r}
certified_counts <- combined_19_23 %>%
  group_by(year_month, COUNTRY_OF_CITIZENSHIP) %>%
  summarise(certified_count = sum(CASE_STATUS %in% c("Certified", "Certified-Expired")),
            total_count = n()) %>%
  mutate(non_certified_count = total_count - certified_count)

average_applicants <- certified_counts %>%
  group_by(year_month) %>%
  summarise(average_for_day = mean(total_count))

average_certified <- certified_counts %>%
  group_by(year_month) %>%
  summarise(certified_for_day = mean(certified_count))
```

```{r}
average_merged_data <- left_join(average_applicants, average_certified, by = "year_month")
```

```{r}
ggplot(average_merged_data, aes(y = average_for_day, x = yearmonth(year_month))) +
  geom_line() +
  geom_line(aes(y = certified_for_day), linetype = "dotted") +
  labs(x = "Average Number of Applicants", y = "Decision Date", title = "Average number of applicants")
```

```{r}
certified_counts <- combined_19_23 %>%
  filter(COUNTRY_OF_CITIZENSHIP %in% top5_countries$COUNTRY_OF_CITIZENSHIP)|>
  group_by(year_month, COUNTRY_OF_CITIZENSHIP) %>%
  summarise(certified_count = sum(CASE_STATUS %in% c("Certified", "Certified-Expired")),
            total_count = n()) %>%
  mutate(non_certified_count = total_count - certified_count)
```

```{r}
ggplot(certified_counts, aes(y = certified_count/total_count, x = yearmonth(year_month))) +
  geom_line() +
  facet_wrap(~COUNTRY_OF_CITIZENSHIP)+
  labs(x = "Decision Date", y = "Certified/Total", title = "Acceptance Rate for the top 5 Countries")
```

#Now, look at correlation between education level and wage

```{r}
combined_19_23
```

```{r}
combined_19_23_accepted <- combined_19_23 |>
  filter(CASE_STATUS %in% c("Certified", "Certified-Expired"))
```

```{r}
#scatter plot: x = time, y = wage, color = education level
ggplot(combined_19_23_accepted, aes(x = yearmonth(year_month), y = log(WAGE_OFFER_FROM), color = FOREIGN_WORKER_EDUCATION)) +
  geom_point(alpha = 0.5) +
  labs(x = "Year Month", y = "Wage", color = "Education Level",
       title = "Scatter Plot of Wage vs Year Month")
```

```{r}
education <- combined_19_23 %>%
  group_by(FOREIGN_WORKER_EDUCATION, year_month) %>%
  summarise(certified_count = sum(CASE_STATUS %in% c("Certified", "Certified-Expired")),
            total_count = n()) %>%
  mutate(non_certified_count = total_count - certified_count)
```

```{r}
ggplot(education, aes(y = total_count, x = yearmonth(year_month), color = FOREIGN_WORKER_EDUCATION)) +
  geom_line() +
  labs(x = "Decision Date", y = "Applied", title = "Applicants and Education Levels")
```

```{r}
ggplot(education, aes(y = certified_count, x = yearmonth(year_month), color = FOREIGN_WORKER_EDUCATION)) +
  geom_line() +
  labs(x = "Decision Date", y = "Accepted", title = "Accepted Applicants and Education Levels")
```

```{r}
ggplot(education, aes(y = certified_count/total_count, x = yearmonth(year_month))) +
  geom_line() +
  facet_wrap(~FOREIGN_WORKER_EDUCATION) +
  labs(x = "Decision Date", y = "Accepted", title = "Accptance Rate and Education Levels")+
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
combined_19_23
```

```{r}
write.csv(combined_19_23, file = "dataset/combined_perm_19_23.csv", row.names = FALSE)
```

#Goals: -see if we can do linear regression once things are normalized by population

```{r}
library(ggplot2)
library(gganimate)
library(maps)

mergetry$Year <- as.factor(mergetry$Year)
world_map <- map_data("world")


population_data <- read.csv("dataset/population_1997-2023.csv", header=TRUE)
colnames(population_data) <- population_data[1, ]
population_data <- population_data[-1, ]

pattern <- "(1997|1998|1999|2000|2001|2002|2003|2004|2005|2006|2007|2008|2009|2010|2011|2012|2013|2014|2015|2016|2017|2018|2019|2020|2021|2022|2023)"

population_data <- population_data %>%
  mutate(year = as.numeric(str_extract(Region, pattern))) %>%
  filter(Year != '1996')
#population_data$Year = as.numeric(population_data$Year)

h1b_country <- 
  read_rds('dataset/cleaned_h1b_data.rds')
colnames(h1b_country) <- c('Country','Continent','1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022')
h1b_long <- pivot_longer(h1b_country, cols = -c("Continent", "Country"), names_to = "year", values_to = "count_h1b")
```

```{r}
standardize_country_names <- function(countries) {
  countries %>%
    tolower() %>%
    str_replace_all("china - mainland", "china") %>%
    str_replace_all("congo, democratic republic of the", "democratic replublic of congo") %>%
    str_replace_all("congo, republic of the", "republic of congo") %>%
    str_replace_all("congo (brazzaville)", "republic of congo") %>%
    str_replace_all("congo (kinshasa)", "democratic republic of congo") %>%
    str_replace_all("hong kong s.a.r.", "hong kong") %>%
    str_replace_all("cape verde", "cabo verde") %>%
    str_replace_all("cape verde", "cabo verde") %>%
    str_replace_all("hong kong sar", "hong kong") %>%
    str_replace_all("islamic republic of iran", "iran") %>%
    str_replace_all("kyrgyz republic", "kyrgyzstan") %>%
    str_replace_all("lao p.d.r.", "laos") %>%
    str_replace_all("macao sar", "macau") %>%
    str_replace_all("north macedonia", "macedonia") %>%
    str_replace_all("russian federation", "russia") %>%
    str_replace_all("korea, republic of", "south korea") %>%
    str_replace_all("taiwan province of china", "taiwan") %>%
    str_replace_all("united republic of tanzania", "tanzania") %>%
    str_replace_all("türkiye, republic of", "turkey") %>%
    str_replace_all("united kingdom", "great britain") %>%
    str_replace_all("bolivarian republic of venezuela", "venezuela") %>%
    str_replace_all("congo, dem. rep. of the", "democratic republic of congo") %>%
    str_replace_all("slovak republic", "slovakia") %>%
    str_replace_all("st lucia", "saint lucia") %>%
    str_replace_all("st vincent", "saint vincent and the grenadines") %>%
    str_replace_all("sri lanka", "sri lanka") %>%
    str_replace_all("bahamas, the", "bahamas") %>%
    str_replace_all("gambia, the", "gambia") %>%
    str_replace_all("myanmar \\(myanmar\\)", "myanmar") %>%
    str_replace_all("united states of america", "united states") %>%
    str_replace_all("china, people's republic of", "china") %>%
    str_replace_all("cote d'ivoire", "côte d'ivoire" )
}

population_data$Country_Standardized <- standardize_country_names(population_data$Name)
h1b_long$Country_Standardized <- standardize_country_names(h1b_long$Country)
world_map$Country_Standardized <- standardize_country_names(world_map$region)
```

```{r}
mergetry <- left_join(population_data, h1b_long, by = c("Year" = "year", "Country_Standardized" = "Country_Standardized"))
mergetry <- mergetry |>
  mutate(Population = as.numeric(gsub(",", "", `Total Population`)))

merge_continent <- mergetry |>
  group_by(Continent, Year)|>
  select(c(Continent, count_h1b, Population, Year))|>
  summarize(across(everything(), sum, na.rm = TRUE)) |>
  filter(Continent != 'NA')
```


```{r}
ggplot(merge_continent, aes(x = Year, y = count_h1b, fill = Continent)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~Continent, scales='free_y') + 
  labs(title = "Total Values by Continent Over the Years",
       x = "Year", y = "Number of Applications") + theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_discrete(guide=guide_axis(check.overlap=TRUE))

ggplot(merge_continent, aes(x = Year, y = count_h1b/Population, fill = Continent)) +
  geom_bar(stat = "identity", position = "stack") +
  facet_wrap(~Continent, scales='free_y') + 
  labs(title = "Total Values by Continent Over the Years, Normalized by Population",
       x = "Year", y = "Number of Applications/Population") + theme(legend.position = "none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_discrete(guide=guide_axis(check.overlap=TRUE))

```



```{r}
# Merge world map data with your dataset

map_data <- merge(world_map, mergetry, by.x = 'region', by.y='Country_Standardized')
```



```{r}
# Create the basic plot
p <- ggplot() +
  geom_map(data = map_data, map = map_data,
           aes(x = long, y = lat, map_id = region, fill = count_h1b)) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_map() +
  theme_void() +
  scale_fill_gradient(low = "lightblue", high = "darkblue", name = "H1B Count") +
  labs(title = "H1B Visa Distribution by Country") +
  theme(plot.title = element_text(hjust = 0.5))
```




```{r}
# Merge world map data with your filtered dataset
h1b_data_2022 <- subset(mergetry, year == 2016)
map_data <- inner_join(world_map, h1b_data_2022, by = "Country_Standardized")
map_data <- map_data[order(map_data$order), ]
map_data <- subset(map_data, year == 2016)
```




```{r}
world_map$region <- world_map$Country_Standardized
# Create the basic plot
p <- ggplot() +
  geom_map(data = map_data, map = map_data,
           aes(map_id = region, fill = log(count_h1b/Population))) +
  expand_limits(x = c(min(map_data$long), max(map_data$long)), 
              y = c(min(map_data$lat), max(map_data$lat)))+
  coord_fixed(ratio=1.3) +
  theme_void() +
  #scale_fill_continuous(name = "H1B Count") + 
  scale_fill_viridis_c()+
  labs(title = "H1B Visa Distribution by Country")
  theme(plot.title = element_text(hjust = 0.5))

# Print plot
print(p)
```
```{r}
# Merge world map data with your dataset
map_data <- inner_join(world_map, mergetry, by = "Country_Standardized")
map_data <- map_data[order(map_data$order), ]
world_map$region <- world_map$Country_Standardized
# Create the basic plot
p <- ggplot() +
  geom_map(data = map_data, map = map_data,
           aes(x = long, y = lat, map_id = region, fill = count_h1b)) +
  expand_limits(x = world_map$long, y = world_map$lat) +
  coord_fixed(1.3) +
  theme_void() +
  scale_fill_gradient(low = "lightblue", high = "darkblue", name = "H1B Count") +
  labs(title = "H1B Visa Distribution by Country") +
  theme(plot.title = element_text(hjust = 0.5))

# Animate the plot by year
animated_plot <- p + 
  transition_states(year, transition_length = 2, state_length = 1) +
  enter_fade() +
  exit_fade()

# Render the animation
animate(animated_plot, fps = 10, width = 800, height = 500)
```


```{r}
temp1 <- population_data |> filter(Name == "Afghanistan")

temp2<-h1b_long |> filter(Country == "Afghanistan")

mergetry <- left_join(temp1, temp2, by = c("Year" = "year", "Name" = "Country"))
```

```{r}
mergetry
```

```{r}
combined_19_23
```

#Group combined data by year and country of citizenship

```{r}
combined_19_23_pop <- combined_19_23 |>
  group_by(year, COUNTRY_OF_CITIZENSHIP)|>
  summarise(num_applicants = n(), num_certified = sum(CASE_STATUS %in% c("Certified", "Certified-Expired")), avg_wage = mean(WAGE_OFFER_FROM))
  
```

```{r}
#make sure both datasets have lower case values for country before merging
combined_19_23_pop <- combined_19_23_pop |>
  mutate(COUNTRY_OF_CITIZENSHIP = toupper(COUNTRY_OF_CITIZENSHIP))

population_data <- population_data |>
  mutate(Name = toupper(Name))

mergetry <- left_join(population_data, combined_19_23_pop, by = c("Year" = "year", "Name" = "COUNTRY_OF_CITIZENSHIP"))
```

We need total population to be a numerical value. This will only introduce NA in the empty rows that indicate a new year is starting, so we can ignore the warning.

```{r}
mergetry$`Total Population` <- as.numeric(gsub(",", "", mergetry$`Total Population`))
```

```{r}
mergetry
```

```{r}
mergetry_2023 <- mergetry |> filter(Year == 2023)
```

```{r}
ggplot(mergetry_2023, aes(x = num_applicants/`Total Population`, y = num_certified/`Total Population`)) +
  geom_point(shape = 21, fill = "blue", color = "black", size = 3, alpha = 0.5) +
  labs(x = "Number of Applicants", y = "Number Certified", title = "Scatter Plot of Applicants vs Certified 2023, normalized by population")
```

```{r}
linear_model_pop <- lm(num_applicants/`Total Population` ~ num_certified/`Total Population` -1, data = mergetry_2023)
```

```{r}
summary(linear_model_pop)
```

```{r}
broom::tidy(linear_model_pop)
```

```{r}
ggplot(linear_model_pop, aes(x = .fitted, y = .resid)) +
  geom_point(shape = 21, fill = "transparent", color = "black", size = 3, alpha = 0.5) +
  labs(x = "Fitted Values", y = "Residuals", title = "Residual vs Fitted of Linear Regression of Number of applicants and number of certifications, normed by population ")
```

#look at the scale, this looks like a good model.

train test split, mse

#Now, see if population can predict number of applicants

```{r}
ggplot(mergetry_2023, aes(x = `Total Population`, y = num_applicants)) +
  geom_point(shape = 21, fill = "blue", color = "black", size = 3, alpha = 0.5) +
  labs(x = "Total Population", y = "Number of Applicants", title = "Scatter Plot of population vs applicants 2023")
```

soooo, doesn't look like a good candidate for linear regression

```{r}
ggplot(mergetry_2023, aes(x = `Total Population`, y = num_certified/num_applicants)) +
  geom_point(shape = 21, fill = "blue", color = "black", size = 3, alpha = 0.5) +
  labs(x = "Total Population", y = "Acceptance Rate", title = "Scatter Plot of Total Population vs Acceptance Rate 2023")
```
